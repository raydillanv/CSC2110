module accumulator (
    input [15:0] In,   // 16-bit input
    input Load,        // Load signal
    input Clk,         // Clock signal
    input Rst,         // Asynchronous reset signal
    output reg [15:0] Out  // 16-bit output
);
    reg [15:0] reg_value;  // Register to hold the current value

    // Always block triggered on positive edge of the clock or asynchronous reset
    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            // If reset is high, clear the register
            reg_value <= 16'b0;
        end
        else if (Load) begin
            // If load is high, set register value to input In
            reg_value <= In;
        end
        else begin
            // Otherwise, accumulate the input with the current value in the register
            reg_value <= reg_value + In;
        end
    end

    // Assign the value of the register to the output
    always @(*) begin
        Out = reg_value;
    end
endmodule
